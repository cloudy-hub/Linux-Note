一、驱动概述
1）、驱动模块的运行方式：
    1、将驱动编译进系统内核，当内核启动的时候，会自动运行驱动程序
    2、将驱动编译成模块（.ko文件）
驱动程序的编写：
    module_init(xxx_init); //注册模块加载函数，xxx_init驱动入口函数
    module_exit(xxx_exit); //注册模块卸载函数，xxx_exit驱动出口函数
驱动模块的使用：
    加载：
        insmod xxx.ko
        modprobe xxx.ko（推荐使用，可以解决依赖问题）
        modprobe，当驱动模块第一次被加载，可能会报错。输入 depmod 命令即可自动生成modules.dep
    卸载：
        rmmod xxx.ko(推荐使用，防止卸载不必要的驱动)
        modprobe -r xxx.ko
创建设备节点文件:
    mknod /dev/chrdevbase c 200 0
    其中“mknod”是创建节点命令，“/dev/chrdevbase”是要创建的节点文件，“c”表示这是个字符设备，“200”是设备的主设备号，“0”是设备的次设备号。

2）、字符设备的注册于注销
     register_chrdev(...)// 在module_init（）中被调用
     unregister_chrdev(...)// 在module_exit（）中被调用
3）、实现驱动的具体内容
    file_operations 结构体就是设备的具体操作函数
4）、添加 LICENSE 和作者信息
    MODULE_LICENSE() //添加模块 LICENSE 信息，必须添加
    MODULE_AUTHOR() //添加模块作者信息
二、字符设备，led驱动要点
1）、MMU。了解功能就行
    ioremap 函数，用于获取指定物理地址空间对应的虚拟地址空间，相当于建立映射
    iounmap 函数，卸载驱动的时候需要使用 iounmap 函数释放掉 ioremap 函数所做的映射
2）、内存访问函数。注意这里操作的是经过映射后的虚拟内存读写
    u8 readb(const volatile void __iomem *addr) 
    u16 readw(const volatile void __iomem *addr) 
    u32 readl(const volatile void __iomem *addr)
    readb、readw 和 readl 这三个函数分别对应 8bit、16bit 和 32bit 读操作，参数 addr 就是要
读取写内存地址，返回值就是读取到的数据。
    void writeb(u8 value, volatile void __iomem *addr) 
    void writew(u16 value, volatile void __iomem *addr)
    void writel(u32 value, volatile void __iomem *addr)
驱动框架：
-------------字符设备驱动框架开始------------------
定义设备号
定义设备名
定义缓冲区。。。
drv_init()
{
    ioremap();//寄存器地址映射
    writel();//设置寄存器内容
    readl();//同上
    register_chrdev(设备号，设备名,&drv_oprt);//注册字符设备驱动
}
drv_write()
{
    copy_from_user();//获取应用程序发送过来的操作信息
}
drv_exirt()
{
    iounmap();//取消映射
    unregister_chrdev();//注销字符设备驱动
}
static struct file_operations drv_oprt = {
    .owen = THIS_MODULE,
    .open...
    .write...
};
-------------字符设备驱动框架结束------------------
三、新字符设备，led驱动
优势1、相比旧版本的设备号问题，换成向内核申请
    alloc_chrdev_region();//没有指定设备号的话就使用函数来申请设备号
    register_chrdev_region();//给定了设备的主设备号和次设备号就使用函数来注册设备号
    unregister_chrdev_region();//注销字符设备之后要释放掉设备号
优势2、新的设备注册方法。替换原先的mknod命令
    cdev 结构体，字符设备结构，主要包含了file_operations，和设备号
    cdev 结构体的使用：
        cdev_init();//主要向cdev添加file_operations
        cdev_add();//于向 Linux 系统添加字符设备
        cdev_del();//从 Linux 内核中删除相应的字符设备
优势3、自动创建设备节点，了解mdev机制
优势4、文件私有数据
新字符设备驱动框架：
-------新------字符设备驱动框架开始------------------
定义设备号 //非必要
定义设备名
/* newchrled 设备结构体 */
struct newchrled_dev{
    dev_t devid; /* 设备号 */
    struct cdev cdev; /* cdev */
    struct class *class; /* 类 */
    struct device *device; /* 设备 */
    int major; /* 主设备号 */
    int minor; /* 次设备号 */
};
drv_init()
{
    ioremap();//寄存器地址映射
    writel();//设置寄存器内容
    readl();//同上
    ////register_chrdev(设备号，设备名,&drv_oprt);//注册字符设备驱动（旧版本）
    /* 注册新字符设备驱动 */
    if(定义了设备号)
      register_chrdev_region();
    else{
        alloc_chrdev_region(&newchrled.devid, 0, NEWCHRLED_CNT,NEWCHRLED_NAME); /* 申请设备号 */
        newchrled.major = MAJOR(newchrled.devid); /* 获取主设备号 */
        newchrled.minor = MINOR(newchrled.devid); /* 获取次设备号 */
    }
    cdev_init(&newchrled.cdev, &drv_oprt);//初始化 cdev
    cdev_add(&newchrled.cdev, newchrled.devid, NEWCHRLED_CNT);//添加一个 cdev
    newchrled.class = class_create(THIS_MODULE, NEWCHRLED_NAME);//创建类
    newchrled.device = device_create(newchrled.class, NULL,newchrled.devid, NULL, NEWCHRLED_NAME);//创建设备
}
drv_write()
{
    copy_from_user();//获取应用程序发送过来的操作信息
}
static int drv_open(struct inode *inode, struct file *filp)
{
    filp->private_data = &newchrled; /* 设置私有数据 */
    return 0;
}
drv_exit()
{
    iounmap();//取消映射
    //////unregister_chrdev();//注销字符设备驱动(旧版本)
    /* 注销字符设备 */
    cdev_del(&newchrled.cdev);/* 删除 cdev */
    unregister_chrdev_region(newchrled.devid, NEWCHRLED_CNT);
    device_destroy(newchrled.class, newchrled.devid);
    class_destroy(newchrled.class);
}
static struct file_operations drv_oprt = {
    .owen = THIS_MODULE,
    .open...
    .write...
};
--------新-----字符设备驱动框架结束------------------
四、设备树
    目的：提高代码复用率
技术实现：
    arch/arm/boot/dts/Makefile，添加SOC支持的板子
    .dtsi 头文件，于描述 SOC 的内部外设信息，比如 CPU 架构、主频、外设寄存器地址范围，比如UART、IIC等等
DTS语法：
    node-name@unit-address，“node-name”是节点名字，“unit-address”一般表示设备的地址或寄存器首地址，如果某个节点没有地址或者寄存器的话“unit-address”可以不要
    label: node-name@unit-address，节点标签(label)，通过&label 来访问这个节点
设备树节点属性：
    1、compatible 属性，
    compatible = "manufacturer,model";
    其中 manufacturer 表示厂商，model 一般是模块对应的驱动名字。
    eg.compatible = "fsl,imx6ul-evk-wm8960","fsl,imx-audio-wm8960";
    2、model 属性,一般 model 属性描述设备模块信息，比如名字什么的
    model = "wm8960-audio";
    3、status 属性
    4、#address-cells 和#size-cells 属性
    #address-cells 属性值决定了子节点 reg 属性中地址信息所占用的字长(32 位)，#size-cells 属性值决定了子节点 reg 属性中长度信息所占的字长(32 位)。
    5、reg 属性,reg 属性的值一般是(address，length)对,一般都是某个外设的寄存器地址范围信息
    6/7/8/ balabala...
在根节点“/”中有两个特殊的子节点:
     aliases 节点的主要功能就是定义别名
     chosen 节点主要是为了 uboot 向 Linux 内核传递数据，重点是 bootargs 参数
设备树常用 OF 操作函数：
    1、of_find_node_by_name 函数，通过节点名字查找指定的节点
    2、of_find_node_by_type 函数，通过 device_type 属性查找指定的节点
    3、of_find_compatible_node 函数，根据 device_type 和 compatible 这两个属性查找指定的节点
    4、of_find_matching_node_and_match 函数，通过 of_device_id 匹配表来查找指定的节点
    5、of_find_node_by_path 函数，通过路径来查找指定的节点
    6、7、8、、、、、balabala
基于设备树的驱动框架
-------------设备树字符设备驱动框架开始------------------
    框架基本参考新字符设备驱动框架程序编写
    改动1、修改设备树
    改动2、向设备结构体增加node(设备树节点成员变量)
    改动3、在 drv_init()函数中通过of相关函数，获取寄存器信息
-------------设备树字符设备驱动框架结束------------------
五、pinctrl 和 gpio 子系统框架
pinctrl 子系统：
pinctrl优势：传统的配置pin的方式就是直接操作相应的寄存器，但是这种配置方式比较繁琐、而且容易出问题(比如pin功能冲突)。pinctrl子系统就是为了解决这个问题而引入的。
-------------pinctrl 框架说明开始------------------
    框架基本参考设备树字符设备驱动框架编写
	以下代码作用就是将MX6UL_PAD_UART1_RTS_B 引脚配置为GPIO1_IO19功能的寄存器参数
	<mux_reg conf_reg input_reg mux_mode input_val>
	0x0090：mux_reg 寄存器偏移地址
	0x031C：conf_reg 寄存器偏移地址
	0x0000：input_reg 寄存器偏移地址
	0x5：mux_reg寄存器值
	0x0：input_reg 寄存器值，在这里无效。
	0x17059 就是 conf_reg 寄存器值
	PS.MX6UL_PAD_UART1_RTS_B__GPIO1_IO19 0x17059  （imx6ull-alientek-emmc.dts）
	#define MX6UL_PAD_UART1_RTS_B__GPIO1_IO19 0x0090 0x031C 0x0000 0x5 0x0
-------------pinctrl 框架说明结束------------------
	说明，关于pinctrl的内容（寄存器地址和寄存器值），由PIN 驱动程序去操作寄存器
gpio 子系统：用于初始化 GPIO 并且提供相应的 API 函数，驱动
开发者在设备树中添加 gpio 相关信息，然后就可以在驱动程序中使用 gpio 子系统提供的 API
函数来操作 GPIO。
优势1、利用了pinctrl的优点
优势2、驱动代码取消了寄存器地址映射步骤
优势3、驱动代码用gpio子系统的API函数，替换了旧版本的与寄存器打交道
gpio 子系统 API 函数：
 1、gpio_request 函数，用于申请一个 GPIO 管脚
 2、gpio_free 函数，
 3、gpio_direction_input 函数，用于设置某个 GPIO 为输入
 4、gpio_direction_output 函数
 5、gpio_get_value 函数
 6、gpio_set_value 函数
与 gpio 相关的 OF 函数
1、of_gpio_named_count 函数,数用于获取设备树某个属性里面定义了几个 GPIO 信息
2、of_gpio_count 函数
3、of_get_named_gpio 函数,获取 GPIO 编号
具体实现：
-------------pinctrl 和 gpio 子系统框架开始------------------
1、添加 pinctrl 节点。打开 imx6ull-alientek-emmc.dts，在 iomuxc 节点的 imx6ul-evk 子节点下创建一个名为“pinctrl_led”的子节点
pinctrl_led: ledgrp { 
	fsl,pins = < 
		MX6UL_PAD_GPIO1_IO03__GPIO1_IO03 0x10B0 /* LED0 */
	 >;
 };
 2、添加 LED 设备节点。在根节点“/”下创建 LED 灯节点，节点名为“gpioled”，
gpioled { 
 #address-cells = <1>;
 #size-cells = <1>;
 compatible = "atkalpha-gpioled"; 
 pinctrl-names = "default"; 
 pinctrl-0 = <&pinctrl_led>;
 led-gpio = <&gpio1 3 GPIO_ACTIVE_LOW>;
 status = "okay"; 
}
3、检查 PIN 是否被其他外设使用."MX6UL_PAD_GPIO1_IO03__GPIO1_IO03",,,"pio1 3"
编写驱动
-------------pinctrl 和 gpio 子系统框架结束------------------
第四十七章 Linux 并发与竞争
Linux 系统并发产生的原因：
①、多线程并发访问
②、抢占式并发访问
③、中断程序并发访问
④、SMP(多核)核间并发访问
Linux 内核提供的四种常用的处理并发和竞争的机制：原子操作、自旋锁、信号量和互斥体